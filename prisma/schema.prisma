// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"            // Required
  output   = "../src/generated/prisma"  // Required path
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TenderStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model User {
  id  Int   @id @default(autoincrement())

  username  String @unique
  email String? @unique
  password  String
  balance Float @default(0.00)
  role UserRole @default(USER)

  isActive Boolean @default(true)
  lastLoginAt DateTime?

  createdTenders Tender[] @relation("CreatedTenders")
  wonTenders Tender[] @relation("WonTenders")


  offers  Offer[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}

model Tender {
  id Int  @id @default(autoincrement())

  title String
  description String?
  startingPrice Float @default(0)
  currentPrice  Float @default(0)

  status TenderStatus @default(DRAFT)

  startDate DateTime?
  endDate DateTime?

  author  User  @relation("CreatedTenders", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int

  winner User? @relation("WonTenders", fields: [winnerId], references: [id])
  winnerId  Int?

  offers  Offer[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}

model Offer {
  id Int  @id @default(autoincrement())

  amount  Float
  description String?
  status OfferStatus @default(PENDING)

  tender  Tender  @relation(fields: [tenderId], references: [id], onDelete: Cascade)
  tenderId  Int

  user  User  @relation(fields: [userId], references: [id])
  userId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}
